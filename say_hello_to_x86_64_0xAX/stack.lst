     1                                 %line 1+1 stack.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 [section .data]
     8                                  SYS_WRITE equ 1
     9                                  STD_IN equ 1
    10                                  SYS_EXIT equ 60
    11                                  EXIT_CODE equ 0
    12                                 
    13 00000000 0A                      NEW_LINE db 0xa
    14 00000001 4D7573742062652074-     WORING_ARGS db "Must be two command line argument",0xa
    15 00000001 776F20636F6D6D616E-
    16 00000001 64206C696E65206172-
    17 00000001 67756D656E740A     
    18                                 
    19                                 [section .text]
    20                                 [global _start]
    21                                 
    22                                 _start:
    23                                 
    24 00000000 59                      pop rcx
    25                                 
    26                                 
    27                                 
    28 00000001 4883F903                cmp rcx,3
    29 00000005 0F85AC000000            jne argsError
    30                                 
    31                                 
    32 0000000B 4883C408                add rsp,8
    33                                 
    34 0000000F 5E                      pop rsi
    35 00000010 E837000000              call str_to_int
    36 00000015 4989C2                  mov r10, rax
    37                                 
    38 00000018 5E                      pop rsi
    39 00000019 E82E000000              call str_to_int
    40 0000001E 4989C3                  mov r11,rax
    41 00000021 4D01DA                  add r10,r11
    42                                 
    43                                 
    44 00000024 4C89D0                  mov rax,r10
    45 00000027 4D31E4                  xor r12,r12
    46 0000002A EBFE                    jmp int_to_str
    47                                 
    48                                 
    49                                 int_to_str:
    50 0000002C 48C7C200000000          mov rdx,0
    51 00000033 48C7C30A000000          mov rbx,10
    52                                 
    53 0000003A 48F7F3                  div rbx
    54 0000003D 4883C230                add rdx,48
    55 00000041 4883C200                add rdx,0x0
    56 00000045 52                      push rdx
    57                                 
    58 00000046 49FFC4                  inc r12
    59 00000049 4883F800                cmp rax,0x0
    60 0000004D 75DB                    jne int_to_str
    61 0000004F EB1E                    jmp print
    62                                 
    63                                 
    64                                 str_to_int:
    65 00000051 4831C0                  xor rax,rax
    66 00000054 48C7C10A000000          mov rcx,10
    67                                 next:
    68 0000005B 803E00                  cmp [rsi],byte 0
    69 0000005E 740E                    je return_str
    70 00000060 8A1E                    mov bl,[rsi]
    71 00000062 80EB30                  sub bl,48
    72 00000065 48F7E1                  mul rcx
    73 00000068 4801D8                  add rax,rbx
    74 0000006B 48FFC6                  inc rsi
    75 0000006E EBE9                    jmp next
    76                                 
    77                                 
    78                                 return_str:
    79 00000070 C3                      ret
    80                                 
    81                                 
    82                                 
    83                                 
    84                                 print:
    85 00000071 48C7C001000000          mov rax,1
    86 00000078 49F7E4                  mul r12
    87 0000007B 49C7C408000000          mov r12,8
    88 00000082 49F7E4                  mul r12
    89 00000085 4889C2                  mov rdx,rax
    90                                 
    91 00000088 48C7C001000000          mov rax,SYS_WRITE
    92 0000008F 48C7C701000000          mov rdi,STD_IN
    93 00000096 4889E6                  mov rsi,rsp
    94 00000099 0F05                    syscall
    95                                 
    96 0000009B EBFE                    jmp printNewline
    97                                 
    98                                 printNewline:
    99 0000009D 48C7C001000000          mov rax,SYS_WRITE
   100 000000A4 48C7C701000000          mov rdi,STD_IN
   101 000000AB 48C7C6[00000000]        mov rsi,NEW_LINE
   102 000000B2 48C7C201000000          mov rdx,1
   103 000000B9 0F05                    syscall
   104 000000BB EB1E                    jmp exit
   105                                 
   106                                 
   107                                 
   108                                 argsError:
   109 000000BD 48C7C001000000          mov rax,SYS_WRITE
   110 000000C4 48C7C701000000          mov rdi,STD_IN
   111 000000CB 48C7C6[00000000]        mov rsi,WORING_ARGS
   112 000000D2 48C7C222000000          mov rdx,34
   113 000000D9 0F05                    syscall
   114 000000DB EBFE                    jmp exit
   115                                 
   116                                 
   117                                 
   118                                 
   119                                 exit:
   120 000000DD 48C7C03C000000          mov rax,SYS_EXIT
   121 000000E4 48C7C700000000          mov rdi,EXIT_CODE
   122 000000EB 0F05                    syscall
   123                                 
   124                                 
   125                                 
